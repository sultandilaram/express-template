generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model wallet_daily_pnl_summary {
  txn_date        DateTime? @db.Date
  user_id         Int?
  wallet_address  String    @db.VarChar(80)
  token_address   String?   @db.VarChar(80)
  open_balance    Float?
  close_balance   Float?
  open_amount     Float?
  close_amount    Float?
  open_price      Float?
  close_price     Float?
  total_value     Float?
  profit          Float?
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  last_updated_at DateTime  @default(now()) @db.Timestamp(6)

  @@unique([wallet_address, created_at])
}

model nft_creators_master {
  nft_collector_id Int      @id @default(autoincrement())
  nft_id           Int?
  mint_address     String?  @db.VarChar(80)
  address          String?  @db.VarChar(80)
  verified         String?  @db.VarChar(5)
  share            Float?
  created_at       DateTime @default(now()) @db.Timestamp(6)
  last_updated_at  DateTime @default(now()) @db.Timestamp(6)

  Nft nft_master? @relation(fields: [mint_address], references: [mint_address])

  @@unique([mint_address, address], map: "unique_mint_creator_address")
}

model nft_master {
  nft_id                      Int       @id @default(autoincrement())
  mint_address                String?   @unique(map: "unique_mint_address") @db.VarChar(80)
  mint_owner                  String?   @db.VarChar(80)
  mint_authority              String?   @db.VarChar(80)
  verified_collection_address String?   @db.VarChar(80)
  collection_id               String?   @db.VarChar(80)
  rank_est                    Int?
  moonrank                    Int?
  howrare_rank                Int?
  rarity_est                  Float?
  update_authority            String?   @db.VarChar(80)
  mint_state                  String?   @db.VarChar(20)
  amount                      BigInt?
  max_supply                  BigInt?
  current_supply              BigInt?
  is_native                   Boolean?
  decimals                    Int?      @db.SmallInt
  collection_name             String?   @db.VarChar(255)
  collection_family           String?   @db.VarChar(255)
  symbol                      String?   @db.VarChar(80)
  name                        String?   @db.VarChar(255)
  description                 String?   @db.VarChar(2000)
  minted_program              String?   @db.VarChar(80)
  minted_market_place         String?   @db.VarChar(80)
  status                      String?   @db.VarChar(20)
  mint_date                   DateTime? @db.Timestamp(6)
  go_live_date                DateTime? @db.Timestamp(6)
  master_edition              String?   @db.VarChar(80)
  metadata_address            String?   @db.VarChar(80)
  label                       String?   @db.VarChar(255)
  seller_fee_basis_points     Int?
  image                       String?   @db.VarChar(500)
  external_url                String?   @db.VarChar(500)
  url                         String?   @db.VarChar(500)
  animation_url               String?   @db.VarChar(500)
  edition                     Int?
  primary_sale_happened       Boolean?
  is_mutable                  Boolean?
  created_at                  DateTime  @default(now()) @db.Timestamp(6)
  last_updated_at             DateTime  @default(now()) @db.Timestamp(6)

  nft_creators_master nft_creators_master[]
  nft_trait_master    nft_trait_master[]
  nft_owners_txn      nft_owners_txn[]
  holders             wallet_holdings_master[]
  collection_master   collection_master?       @relation(fields: [collection_id], references: [collection_id])
}

model nft_trait_master {
  nft_trait_id    Int      @id @default(autoincrement())
  nft_id          Int?
  mint_address    String?  @db.VarChar(80)
  trait_type      String?  @db.VarChar(255)
  value           String?  @db.VarChar(255)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  last_updated_at DateTime @default(now()) @db.Timestamp(6)

  Nft nft_master? @relation(fields: [mint_address], references: [mint_address])

  @@unique([mint_address, trait_type, value], map: "unique_mint_traits")
}

model user_master {
  user_id         Int      @id @default(autoincrement())
  full_name       String?  @db.VarChar(255)
  status          String?  @db.VarChar(20)
  user_type       String?  @db.VarChar(20)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  last_updated_at DateTime @default(now()) @db.Timestamp(6)
  json_str        Json?    @db.Json

  wallet_master wallet_master[]
}

model wallet_holdings_master {
  user_id         Int
  wallet_address  String   @db.VarChar(80)
  token_address   String   @db.VarChar(80)
  account_type    String?  @db.VarChar(20)
  mint_address    String?  @db.VarChar(80)
  decimals        Int?     @db.SmallInt
  balance         BigInt?
  lamports        BigInt?
  slot            BigInt?
  created_at      DateTime @default(now()) @db.Timestamp(6)
  last_updated_at DateTime @default(now()) @db.Timestamp(6)

  Holder wallet_master? @relation(name: "walletHoldings", fields: [wallet_address], references: [wallet_address])
  Nft    nft_master?    @relation(fields: [mint_address], references: [mint_address])

  @@id([user_id, wallet_address, token_address])
}

// Wallet
model wallet_master {
  wallet_id       Int      @id @default(autoincrement())
  wallet_address  String?  @unique @db.VarChar(80)
  user_id         Int?
  wallet_type     String?  @db.VarChar(20)
  twitter_handle  String?  @db.VarChar(80)
  name            String?  @db.VarChar(80)
  label           String?  @db.VarChar(255)
  status          String?  @db.VarChar(20)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  last_updated_at DateTime @default(now()) @db.Timestamp(6)

  User           user_master?             @relation(fields: [user_id], references: [user_id])
  // nftSales       nft_owners_txn[]         @relation(name: "walletNftSales")
  nftPurchases   nft_owners_txn[]         @relation(name: "walletNftPurchases")
  walletHoldings wallet_holdings_master[] @relation(name: "walletHoldings")
  // walletTxn      wallet_holdings_txn[]    @relation(name: "walletTxn")

  @@unique([wallet_address, user_id], map: "unique_wallet_user_id")
}

// // =========================

// AUTH
model auth_request {
  request_id      Int      @id @default(autoincrement())
  wallet_address  String   @unique @db.VarChar(80)
  nonce           String   @db.VarChar(80)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  last_updated_at DateTime @updatedAt @db.Timestamp(6)
}

// model collection_address_project_id_resolver {
//   collection_address String @id @unique
//   project_id         String
// }

// ========================
model collection_floor_stats {
  collection_id              String   @db.VarChar(80)
  txn_date                   DateTime @db.Date
  market_cap                 BigInt?
  volume_7day                BigInt?
  volume_1day                BigInt?
  volume_1day_change         Float?
  floor_price                Float?
  floor_price_1day_change    Float?
  average_price              Float?
  max_price                  Float?
  supply                     BigInt?
  num_of_token_holders       BigInt?
  twitter_followers          BigInt?
  discord_members            BigInt?
  average_price_1day_change  Float?
  num_of_token_listed        BigInt?
  percentage_of_token_listed Float?
  rank                       Int?
  created_at                 DateTime @default(now()) @db.Timestamp(6)
  last_updated_at            DateTime @default(now()) @db.Timestamp(6)

  collection_master collection_master? @relation(fields: [collection_id], references: [collection_id])

  @@id([collection_id, txn_date])
}

model collection_master {
  collection_id   String   @id @db.VarChar(80)
  json_str        Json?    @db.Json
  created_at      DateTime @default(now()) @db.Timestamp(6)
  last_updated_at DateTime @default(now()) @db.Timestamp(6)

  nft_master             nft_master[]
  collection_floor_stats collection_floor_stats[]
}

model nft_daily_floor_price {
  token_address   String   @db.VarChar(80)
  txn_date        DateTime @db.Date
  floor_price     Float?
  created_at      DateTime @default(now()) @db.Timestamp(6)
  last_updated_at DateTime @default(now()) @db.Timestamp(6)

  @@id([token_address, txn_date])
}

// // NFT

// // model collection_master {
// //   collection_id      Int          @id @default(autoincrement())
// //   collection_address String       @unique @db.VarChar(255)
// //   name               String       @db.VarChar(255)
// //   symbol             String       @db.VarChar(255)
// //   description        String       @db.VarChar(255)
// //   image              String       @db.VarChar(255)
// //   floor_price        Float        @db.DoublePrecision
// //   created_at         DateTime     @default(now()) @db.Timestamp(6)
// //   last_updated_at    DateTime     @default(now()) @db.Timestamp(6)
// //   nft_master         nft_master[]
// // }

model nft_owners_txn {
  nft_owners_txn_id Int       @id @default(autoincrement())
  mint_address      String?   @db.VarChar(80)
  token_address     String?   @db.VarChar(80)
  mint_authority    String?   @db.VarChar(80)
  txn_time          DateTime? @db.Timestamp(6)
  txn_type          String?   @db.VarChar(20)
  buyer             String?   @db.VarChar(80)
  seller            String?   @db.VarChar(80)
  wallet            String?   @db.VarChar(80)
  onchain_price     BigInt?
  user_edited_price BigInt?
  market_place      String?   @db.VarChar(80)
  created_at        DateTime  @default(now()) @db.Timestamp(6)
  last_updated_at   DateTime  @default(now()) @db.Timestamp(6)

  Nft   nft_master?    @relation(fields: [mint_address], references: [mint_address])
  Buyer wallet_master? @relation(name: "walletNftPurchases", fields: [buyer], references: [wallet_address])
  // Seller wallet_master? @relation(name: "walletNftSales", fields: [seller], references: [wallet_address])
}

model wallet_holdings_txn {
  wallet_holdings_id Int       @id @default(autoincrement())
  wallet_address     String?   @db.VarChar(80)
  from_address       String?   @db.VarChar(80)
  to_address         String?   @db.VarChar(80)
  token_address      String?   @db.VarChar(80)
  txn_type           String?   @db.VarChar(20)
  lamports           BigInt?
  decimals           Int?      @db.SmallInt
  market_place       String?   @db.VarChar(80)
  token_size         BigInt?
  txn_time           DateTime? @db.Timestamp(6)
  authority_address  String?   @db.VarChar(80)
  created_at         DateTime  @default(now()) @db.Timestamp(6)
  last_updated_at    DateTime  @default(now()) @db.Timestamp(6)

  // wallet_master wallet_master? @relation(name: "walletTxn", fields: [wallet_address], references: [wallet_address])
}
